@page
@model FrontEndRazor.Pages.Users.AddUserModel

@{
    ViewData["Title"] = "Add User";
}

<!-- Main Container -->
<div class="container mt-5">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12 text-center">
            <h1 class="display-4 text-success">@ViewData["Title"]</h1>
            <p class="lead text-muted">Create a new user in the system.</p>
        </div>
    </div>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Model.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Form Card -->
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="post" class="needs-validation" novalidate onsubmit="return validatePassword(event)">
                        <div class="form-group mb-3">
                            <label asp-for="AddUserDTO.Username" class="form-label fw-bold"></label>
                            <input asp-for="AddUserDTO.Username" class="form-control" required />
                            <span asp-validation-for="AddUserDTO.Username" class="text-danger"></span>
                            <div class="invalid-feedback">
                                Username is required.
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="AddUserDTO.Email" class="form-label fw-bold"></label>
                            <input asp-for="AddUserDTO.Email" type="email" class="form-control" required />
                            <span asp-validation-for="AddUserDTO.Email" class="text-danger"></span>
                            <div class="invalid-feedback">
                                Valid email is required.
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="AddUserDTO.PhoneNumber" class="form-label fw-bold"></label>
                            <input asp-for="AddUserDTO.PhoneNumber" type="tel" class="form-control" />
                            <span asp-validation-for="AddUserDTO.PhoneNumber" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="AddUserDTO.Password" class="form-label fw-bold"></label>
                            <input asp-for="AddUserDTO.Password" type="password" class="form-control" id="Password" required />
                            <span asp-validation-for="AddUserDTO.Password" class="text-danger"></span>
                            <div class="invalid-feedback">
                                Password is required.
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label for="ConfirmPassword" class="form-label fw-bold">Confirm Password</label>
                            <input id="ConfirmPassword" name="ConfirmPassword" type="password" class="form-control" required />
                            <div class="invalid-feedback">
                                Confirm Password is required.
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="AddUserDTO.Role" class="form-label fw-bold"></label>
                            <select asp-for="AddUserDTO.Role" class="form-control" required>
                                <option value="">Select Role</option>
                                @if (Model.Roles != null && Model.Roles.Any())
                                {
                                    foreach (var role in Model.Roles)
                                    {
                                        <option value="@role">@role</option>
                                    }
                                }
                                else
                                {
                                    <option value="">No roles available</option>
                                }
                            </select>
                            <span asp-validation-for="AddUserDTO.Role" class="text-danger"></span>
                            <div class="invalid-feedback">
                                Please select a role.
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="bi bi-person-plus"></i> Create User
                            </button>
                            <a asp-page="./Users" class="btn btn-secondary">
                                <i class="bi bi-x-circle"></i> Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Scripts Section for Bootstrap and Icons -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    
    <script>
        function validatePassword(event) {
            var password = document.getElementById("Password").value;
            var confirmPassword = document.getElementById("ConfirmPassword").value;
            var form = document.querySelector('.needs-validation');
            var isValid = true; // Flag to track if the form is valid
            var errorMessages = []; // Array to store error messages

            // Reset previous validation classes
            document.getElementById('Password').classList.remove('is-invalid');
            document.getElementById('ConfirmPassword').classList.remove('is-invalid');

            // Check for empty fields
            if (!password) {
                document.getElementById('Password').classList.add('is-invalid');
                isValid = false;
            }

            if (!confirmPassword) {
                document.getElementById('ConfirmPassword').classList.add('is-invalid');
                isValid = false;
            }

            // Check for password matching and strength only if fields are filled
            if (isValid) {
                if (password !== confirmPassword) {
                    errorMessages.push("Passwords do not match.");
                    isValid = false;
                }

                if (password.length < 8 ||
                    !/\d/.test(password) ||
                    !/[a-z]/.test(password) ||
                    !/[A-Z]/.test(password) ||
                    !/[^a-zA-Z0-9]/.test(password)) {
                    errorMessages.push("Password should have at least: (8) characters, including: (1) uppercase, (1) lowercase, (1) digit, (1) special character.");
                    isValid = false;
                }
            }

            // If the form is invalid, prevent submission and show alert if there are error messages
            if (!isValid) {
                event.preventDefault(); // Prevent form submission
                event.stopPropagation(); // Stop propagation of the submit event
                form.classList.add('was-validated'); // Show validation styles

                if (errorMessages.length > 0) {
                    alert(errorMessages.join("\n")); // Show all error messages in one alert
                }
            }

            return isValid; // Return false if the form is invalid, preventing submission
        }

        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', validatePassword, false); // Attach validatePassword directly to submit
                });
            }, false);
        })();
    </script>
}
