@page "{id}"
@model FrontEndRazor.Pages.Users.ChangePasswordModel

@{
    ViewData["Title"] = "Change Password";
}

<!-- Main Container -->
<div class="container mt-5">
    <!-- Header -->
    <div class="row mb-4 justify-content-center">
        <div class="col-12 text-center">
            <h1 class="display-4 text-info">@ViewData["Title"]</h1>
            <p class="lead text-muted">Update your password below.</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Model.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Form Card -->
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="post" class="needs-validation" novalidate onsubmit="return validatePasswords(event)">
                        <input type="hidden" asp-for="ChangePasswordDTO.UserId" />

                        <div class="mb-3">
                            <label asp-for="ChangePasswordDTO.CurrentPassword" class="form-label fw-bold">Current Password</label>
                            <input asp-for="ChangePasswordDTO.CurrentPassword" class="form-control" type="password" id="oldPassword" required />
                            <span asp-validation-for="ChangePasswordDTO.CurrentPassword" class="text-danger"></span>
                            <div class="invalid-feedback">
                                Current password is required.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ChangePasswordDTO.NewPassword" class="form-label fw-bold">New Password</label>
                            <input asp-for="ChangePasswordDTO.NewPassword" class="form-control" type="password" id="newPassword" required />
                            <span asp-validation-for="ChangePasswordDTO.NewPassword" class="text-danger"></span>
                            <div class="invalid-feedback">
                                New password is required.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="ConfirmPassword" class="form-label fw-bold">Confirm Password</label>
                            <input id="ConfirmPassword" name="ConfirmPassword" type="password" class="form-control" required />
                            <div class="invalid-feedback">
                                Please confirm your new password.
                            </div>
                        </div>

                        <!-- Buttons -->
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary me-2 w-100">Change Password</button>
                            <a asp-page="./UpdateUser" asp-route-id="@Model.ChangePasswordDTO.UserId" class="btn btn-secondary w-100">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function validatePasswords(event) {
        var currentPassword = document.getElementById('oldPassword').value;
        var newPassword = document.getElementById('newPassword').value;
        var confirmPassword = document.getElementById('ConfirmPassword').value;
        var form = document.querySelector('.needs-validation');
        var isValid = true; // Flag to track if the form is valid
        var errorMessages = []; // Array to store error messages

        // Reset previous validation classes
        document.getElementById('oldPassword').classList.remove('is-invalid');
        document.getElementById('newPassword').classList.remove('is-invalid');
        document.getElementById('ConfirmPassword').classList.remove('is-invalid');

        // Check for empty fields
        if (!currentPassword) {
            document.getElementById('oldPassword').classList.add('is-invalid');
            isValid = false; // Mark the form as invalid
        }

        if (!newPassword) {
            document.getElementById('newPassword').classList.add('is-invalid');
            isValid = false;
        }

        if (!confirmPassword) {
            document.getElementById('ConfirmPassword').classList.add('is-invalid');
            isValid = false;
        }

        // Check for password matching and strength only if fields are filled
        if (isValid) {
            if (newPassword == currentPassword) {
                errorMessages.push("New password cannot be the same as the old password.");
                isValid = false;
            }

            if (newPassword !== confirmPassword) {
                errorMessages.push("Passwords do not match.");
                isValid = false;
            }

            if (newPassword.length < 8 ||
                !/\d/.test(newPassword) ||
                !/[a-z]/.test(newPassword) ||
                !/[A-Z]/.test(newPassword) ||
                !/[^a-zA-Z0-9]/.test(newPassword)) {
                errorMessages.push("Password should have at least: (8) characters, including: (1) uppercase, (1) lowercase, (1) digit, (1) special character.");
                isValid = false;
            }
        }

        // If the form is invalid, prevent submission and show alert if there are error messages
        if (!isValid) {
            event.preventDefault(); // Prevent form submission
            event.stopPropagation(); // Stop propagation of the submit event
            form.classList.add('was-validated'); // Show validation styles

            if (errorMessages.length > 0) {
                alert(errorMessages.join("\n")); // Show all error messages in one alert
            }
        }

        return isValid; // Return false if the form is invalid, preventing submission
    }

    (function () {
        'use strict';
        window.addEventListener('load', function () {
            var forms = document.getElementsByClassName('needs-validation');
            Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', validatePasswords, false); // Attach validatePasswords directly to submit
            });
        }, false);
    })();
</script>
